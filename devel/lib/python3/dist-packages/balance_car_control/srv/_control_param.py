# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from balance_car_control/control_paramRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_paramRequest(genpy.Message):
  _md5sum = "246e71c94ab082441dd57639ad4eb032"
  _type = "balance_car_control/control_paramRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Data sensed by sensors
float64 leftWheelVelocity        
float64 rightWheelVelocity       
float64 pitch                    
float64 yaw                     
float64 pitchAngVelocity         
float64 yawAngVelocity           
# Control messages received by the keyboard control node
float64 dst_vel                  
float64 dst_yaw                  
"""
  __slots__ = ['leftWheelVelocity','rightWheelVelocity','pitch','yaw','pitchAngVelocity','yawAngVelocity','dst_vel','dst_yaw']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftWheelVelocity,rightWheelVelocity,pitch,yaw,pitchAngVelocity,yawAngVelocity,dst_vel,dst_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_paramRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leftWheelVelocity is None:
        self.leftWheelVelocity = 0.
      if self.rightWheelVelocity is None:
        self.rightWheelVelocity = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitchAngVelocity is None:
        self.pitchAngVelocity = 0.
      if self.yawAngVelocity is None:
        self.yawAngVelocity = 0.
      if self.dst_vel is None:
        self.dst_vel = 0.
      if self.dst_yaw is None:
        self.dst_yaw = 0.
    else:
      self.leftWheelVelocity = 0.
      self.rightWheelVelocity = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.pitchAngVelocity = 0.
      self.yawAngVelocity = 0.
      self.dst_vel = 0.
      self.dst_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.leftWheelVelocity, _x.rightWheelVelocity, _x.pitch, _x.yaw, _x.pitchAngVelocity, _x.yawAngVelocity, _x.dst_vel, _x.dst_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.leftWheelVelocity, _x.rightWheelVelocity, _x.pitch, _x.yaw, _x.pitchAngVelocity, _x.yawAngVelocity, _x.dst_vel, _x.dst_yaw,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.leftWheelVelocity, _x.rightWheelVelocity, _x.pitch, _x.yaw, _x.pitchAngVelocity, _x.yawAngVelocity, _x.dst_vel, _x.dst_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.leftWheelVelocity, _x.rightWheelVelocity, _x.pitch, _x.yaw, _x.pitchAngVelocity, _x.yawAngVelocity, _x.dst_vel, _x.dst_yaw,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from balance_car_control/control_paramResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_paramResponse(genpy.Message):
  _md5sum = "b727766ecb9b19062370d32e6dbc80b1"
  _type = "balance_car_control/control_paramResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Control torque of two wheels of balancing car
float64 leftTorque
float64 rightTorque
"""
  __slots__ = ['leftTorque','rightTorque']
  _slot_types = ['float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftTorque,rightTorque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_paramResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leftTorque is None:
        self.leftTorque = 0.
      if self.rightTorque is None:
        self.rightTorque = 0.
    else:
      self.leftTorque = 0.
      self.rightTorque = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.leftTorque, _x.rightTorque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.leftTorque, _x.rightTorque,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.leftTorque, _x.rightTorque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.leftTorque, _x.rightTorque,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
class control_param(object):
  _type          = 'balance_car_control/control_param'
  _md5sum = '0acb029cdb27dd01bf6ea8bf609b687e'
  _request_class  = control_paramRequest
  _response_class = control_paramResponse
